name: CI Tests
on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - main

jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.23.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: go test -v -covermode=count -json ./... > test.json
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json
  test:
    runs-on: ubuntu-latest
    services:
      openldap:
        image: osixia/openldap:latest
        ports:
          - "389:389"
          - "636:636"
        env:
          LDAP_ORGANISATION: example
          LDAP_DOMAIN: example.org
          LDAP_ADMIN_USERNAME: admin
          LDAP_ADMIN_PASSWORD: admin
          LDAP_CONFIG_PASSWORD: config_pass
          LDAP_BASE_DN: "dc=example,dc=org"
          BITNAMI_DEBUG: true
          LDAP_REMOVE_CONFIG_AFTER_SETUP: false
          LDAP_ENABLE_TLS: true
          LDAP_LDAPS_PORT_NUMBER: 636
          LDAP_TLS_CERT_FILE: /container/service/slapd/assets/certs/ldap.crt
          LDAP_TLS_KEY_FILE: /container/service/slapd/assets/certs/ldap.key
          LDAP_TLS_CA_FILE: /container/service/slapd/assets/certs/ca.crt
          LDAP_TLS_VERIFY_CLIENT: try
    env:
      BATON_PASSWORD: admin
      BATON_BASE_DN: 'dc=example,dc=org'
      BATON_USER_DN: 'CN=admin,DC=example,DC=org'
      BATON_URL: 'ldaps://localhost'
      BATON_INSECURE_SKIP_VERIFY: true
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21.x'
      - name: Install ldapadd
        run: sudo apt update && sudo apt install ldap-utils
      - name: Create ldif files
        run: node ./scripts/ldif.js && ls -la
      - name: Import ldif into openldap
        run: ./scripts/import.sh
      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin
      - name: Build baton-ldap
        run: go build ./cmd/baton-ldap
      - name: Run baton-ldap
        run: ./baton-ldap
      - name: List grants
        run: baton grants
      - name: Test grant/revoking posixGroup entitlements
        env:
          BATON: baton
          BATON_LDAP: ./baton-ldap
          BATON_ENTITLEMENT: "group:cn=testgroup00000,dc=example,dc=org:member"
          BATON_PRINCIPAL: "cn=testuser00099@example.com,dc=example,dc=org"
          BATON_PRINCIPAL_TYPE: "user"
        run: ./scripts/grant-revoke.sh
      - name: Test grant/revoking groupOfUniqueNames entitlements
        env:
          BATON: baton
          BATON_LDAP: ./baton-ldap
          BATON_ENTITLEMENT: "group:cn=othertestgroup00000,dc=example,dc=org:member"
          BATON_PRINCIPAL: "cn=testuser00099@example.com,dc=example,dc=org"
          BATON_PRINCIPAL_TYPE: "user"
        run: ./scripts/grant-revoke.sh

      - name: Create account
        env:
          ACCOUNT_DISPLAYNAME: 'Example User'
          CREATE_ACCOUNT_FLAGS: >-
              --create-account-login="example-user"
              --create-account-profile='{"rdnKey":"cn","rdnValue":"example-user","path":"","suffix":"dc=example,dc=org","objectClass":["top","person"],"additionalAttributes":{"cn":"Example User","sn":"User"}}'
              
        run: ./baton-ldap ${{ env.CREATE_ACCOUNT_FLAGS }} 

      - name: Check account was created
        id: check_account
        run: |
          ./baton-ldap
          CREATED_ACCOUNT_ID=$(baton resources --output-format=json | jq -r --arg name "Example User" '.resources[] | select(.resource.displayName == $name) | .resource.id.resource')
          echo "account_id=$CREATED_ACCOUNT_ID" >> $GITHUB_OUTPUT
          [ -n "$CREATED_ACCOUNT_ID" ]